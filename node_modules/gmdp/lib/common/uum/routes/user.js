/**
 * Created by ShiHukui on 2016/2/19.
 */
var express = require('express');
var router = express.Router();

var utils = require('../../../common/core/utils/app_utils');
var userService = require('../services/user_service');

var fs = require('fs');

var xlsx = require('node-xlsx');

router.route('/')
    .get(function(req,res){
        // 分页条件
        var filter_name = req.query.filter_name;
        var filter_sys = req.query.filter_sys;
        var filter_org = req.query.filter_org;

        // 分页参数
        var page = req.query.page;
        var length = req.query.rows;

        var conditionMap = {};
        // or 查询
        if(filter_name){
            conditionMap['$or'] = [{'login_account':new RegExp(filter_name)},{'user_name':new RegExp(filter_name)}];
        }
        if(filter_sys) {
            conditionMap.user_sys = filter_sys;
        }
        if(filter_org && filter_org != 0) {
            conditionMap.user_org = filter_org;
        }

        // 调用分页
        userService.getUserList(page, length, conditionMap,  function(result){
            utils.respJsonData(res, result);
        });
    })

    .post(function(req,res){
        // 获取提交信息
        var login_account = req.body.login_account;
        var user_no = req.body.user_no;
        var user_name = req.body.user_name;
        var user_gender = req.body.user_gender;
        var user_phone = req.body.user_phone;
        var photoArr=["adam-jansen.jpg", "divyia.jpg","Javi-Jimenez.jpg", "John-Smith.jpg","Lee-Munroe.jpg","Matt-Cheuvront.jpg","Nicolai-Larson.jpg","Osvaldus-Valutis.jpg","Sergey-Azovskiy.jpg","Stephanie-Walter.jpg"];

        var user_photo=photoArr[Math.ceil(Math.random()*10)];
        var user_email = req.body.user_email;
        var user_status = req.body.user_status;
        var user_org = req.body.user_org;
        var user_sys = req.body.user_sys;
        // 数组特殊处理
        var user_role = req.body.user_roles ? [req.body.user_roles] : req.body['user_roles[]'];

        // 验证
        if(!login_account) {
            utils.respMsg(res, false, '2001', '登陆账号不能为空。', null, null);
        }
        if(!user_sys) {
            utils.respMsg(res, false, '2002', '归属系统不能为空。', null, null);
        }
        if(!user_status) {
            utils.respMsg(res, false, '2003', '状态不能为空。', null, null);
        }
        if(!user_role) {
            utils.respMsg(res, false, '2004', '拥有角色不能为空。', null, null);
        }
        if(!user_no) {
            utils.respMsg(res, false, '2005', '用户编号不能为空。', null, null);
        }
        if(!user_name) {
            utils.respMsg(res, false, '2006', '用户姓名不能为空。', null, null);
        }
        if(!user_org) {
            utils.respMsg(res, false, '2007', '所在机构/部门不能为空。', null, null);
        }
        if(!user_gender) {
            utils.respMsg(res, false, '2008', '所在机构/部门不能为空。', null, null);
        }
        // 验证通过组装数据
        var data = {};
        data.login_account = login_account;
        data.user_status = parseInt(user_status);
        data.user_no = user_no;
        data.user_name = user_name;
        data.user_gender = parseInt(user_gender);
        data.user_roles = new Array();
        data.user_photo=user_photo;
        if(user_phone){
            data.user_phone = user_phone;
        }
        if(user_email){
            data.user_email = user_email;
        }
        userService.saveUser(data, user_sys, user_role, user_org, function(result) {
            utils.respJsonData(res, result);
        });
    });

/**
 * 获取角色数据
 */
router.route('/getRoleData/:sysid')
    .get(function(req,res){
        var sysid = req.params.sysid;
        if(sysid) {
            userService.getRoleBySys(sysid, function(result){
                utils.respJsonData(res, result);
            });
        }
        else {
            utils.respJsonData(res, new Array());
        }
    });

/**
 * 获取角色数据
 */
router.route('/resetpwd/:id')
    .get(function(req,res){
        var id = req.params.id;
        if(id) {
            userService.resetPwd(id, function(result){
                utils.respJsonData(res, result);
            });
        }
        else {
            utils.respMsg(res, false, '2000', '用户ID不能为空。', null, null);
        }
    });

router.route('/:id')
    .put(function(req,res){

        // 获取提交信息
        var id = req.params.id;
        var login_account = req.body.login_account;
        var user_no = req.body.user_no;
        var user_name = req.body.user_name;
        var user_gender = req.body.user_gender;
        var user_phone = req.body.user_phone;
        var user_email = req.body.user_email;
        var user_status = req.body.user_status;
        var user_org = req.body.user_org;
        var user_sys = req.body.user_sys;
        // 数组特殊处理
        var user_role = req.body.user_roles ? [req.body.user_roles] : req.body['user_roles[]'];

        // 验证
        if(!id) {
            utils.respMsg(res, false, '2000', 'ID不能为空。', null, null);
        }
        if(!login_account) {
            utils.respMsg(res, false, '2001', '登陆账号不能为空。', null, null);
        }
        if(!user_sys) {
            utils.respMsg(res, false, '2002', '归属系统不能为空。', null, null);
        }
        if(!user_status) {
            utils.respMsg(res, false, '2003', '状态不能为空。', null, null);
        }
        if(!user_role) {
            utils.respMsg(res, false, '2004', '拥有角色不能为空。', null, null);
        }
        if(!user_no) {
            utils.respMsg(res, false, '2005', '用户编号不能为空。', null, null);
        }
        if(!user_name) {
            utils.respMsg(res, false, '2006', '用户姓名不能为空。', null, null);
        }
        if(!user_org) {
            utils.respMsg(res, false, '2007', '所在机构/部门不能为空。', null, null);
        }
        if(!user_gender) {
            utils.respMsg(res, false, '2008', '所在机构/部门不能为空。', null, null);
        }
        // 验证通过组装数据
        var data = {};
        data.login_account = login_account;
        data.user_status = parseInt(user_status);
        data.user_no = user_no;
        data.user_name = user_name;
        data.user_gender = parseInt(user_gender);
        data.user_roles = new Array();
        if(user_phone){
            data.user_phone = user_phone;
        }
        if(user_email){
            data.user_email = user_email;
        }
        userService.updateUser(id, data, user_sys, user_role, user_org, function(result) {
            utils.respJsonData(res, result);
        });
    })

    .get(function(req,res){
        var id = req.params.id;
        if(id) {
            userService.getUser(id, function(result){
                utils.respJsonData(res, result);
            });
        }
        else {
            utils.respMsg(res, false, '2000', '用户ID不能为空。', null, null);
        }
    });


var dirPath=__dirname+"/public/static/file";
router.route('/user_batch_upload').post(function (req,res,next) {

    var file = req.files.user_inf;

    if (file.extension === 'xlsx' || file.extension === 'xls') {
        if ((file.size / 1024) <= 10240) {
            if (file.name !== null && file.name !== '' && file.name !== undefined&&fs.existsSync(file.path)){

              var uploadTimes=  readFile(file.path);
                deleteFile(file.path);
                utils.respMsg(res, false, '2002', uploadTimes+'个文件上传成功!', null, null);
            }else{
                utils.respMsg(res, false, '2002', '文件上传异常!', null, null);
            }
        } else {
            deleteFile(file.path);
            utils.respMsg(res, false, '2002', '文件过大!', null, null);
        }
    } else {
        deleteFile(file.path);
        utils.respMsg(res, false, '2001', '文件类型错误!', null, null);
    }
});

/**
 * 读取上传的excel表格将数据存入数据库
 * @param fileName
 * @returns {Array}
 */
function readFile(filePath) {
    var uploadTimes=0;
    var obj = xlsx.parse(filePath);
    var excelObj = obj[0].data;
    var data = [];
    for (var i in excelObj) {
        var arr = [];
        var value = excelObj[i];
        /**
         * 每行中有任何一列没有值，该行将不会被写入数据库
         */
        for (var j=0;j<value.length;j++) {
            if (isNull(value[j]))
                arr.push(value[j]);
            else
                break;
        }
       if(arr.length===11);
        data.push(arr);
    }
    var photoArr=["adam-jansen.jpg", "divyia.jpg","Javi-Jimenez.jpg", "John-Smith.jpg","Lee-Munroe.jpg","Matt-Cheuvront.jpg","Nicolai-Larson.jpg","Osvaldus-Valutis.jpg","Sergey-Azovskiy.jpg","Stephanie-Walter.jpg"];

    for (var i = 2; i < data.length; i++) {
        var value = data[i];
        var user_listEntity = {
            /**
             * 常规数据实体
             */
            user_no: value[0],
            login_account: value[1],
            login_password:value[2],
            user_name: value[3],
            user_gender: value[4],
            user_phone: value[5],
            user_email:value[6],
            user_status: value[7],
            user_org:value[8],
            user_sys:value[9],
            user_roles:[value[10]],
            user_photo:photoArr[Math.ceil(Math.random()*10)],
            __v:Number(1)
        };

        uploadTimes++;
        userService.SaveListUser(user_listEntity, function (result){

        });
    }
return uploadTimes;

}
function isNull(item) {
    if (item === null || item === undefined || item === '')
        return false;
    else
        return true;
}
/**
 * 删除没用的文件
 * @param fileName
 */
function deleteFile(fileName) {
    fs.unlink(fileName, function (err) {
        if (err){
            console.log(err);
        }
        console.log('成功删除');
    });
}


module.exports = router;

